# !/usr/bin/env python
# -----------------------------------------------------------------------------
# This file is part of EventsRecorder
#       https://github.com/ALBA-Synchrotron/EventsRecorder
#
# Copyright 2019 CELLS / ALBA Synchrotron, Bellaterra, Spain
#
# Distributed under the terms of the GNU General Public License,
# either version 3 of the License, or (at your option) any later version.
# See LICENSE.txt for more info.
#
# You should have received a copy of the GNU General Public License
# along with pyIcePAP. If not, see <http://www.gnu.org/licenses/>.
# -----------------------------------------------------------------------------
import argparse
import os
import time
import logging
import logging.config
from recorder import AttributeRegister


LOGGING_CONFIG = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '',
            'mode': 'a',
            'encoding': 'utf-8',
            'formatter': 'verbose',
            'maxBytes': 10000000,
            'backupCount': 1,
        }
    },
    'loggers': {
        'EventRecorder': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        }
    }
}


def main():
    desc = 'Script to Record on files the changes events generated by the ' \
           'attributes'
    fmt = argparse.RawDescriptionHelpFormatter
    parse = argparse.ArgumentParser(description=desc, formatter_class=fmt)
    parse.add_argument('input', help='ASCII file with one attribute by line')
    parse.add_argument('-n', '--number', default=5, type=int,
                       help='Number of rotated log files')
    parse.add_argument('-l', '--log_dir', help='log file directory',
                       default='/tmp/EventsRecorder')
    parse.add_argument('-s', '--size', help='log file size', type=int,
                       default=10000000)

    args = parse.parse_args()
    if not os.path.exists(args.log_dir):
        os.makedirs(args.log_dir)
    log_filename = os.path.join(args.log_dir, 'eventsrecoreder.log')
    log_filename = os.path.abspath(log_filename)
    print('The log files will be in {0}'.format(args.log_dir))
    LOGGING_CONFIG['handlers']['file']['filename'] = log_filename
    LOGGING_CONFIG['handlers']['file']['backupCount'] = args.number
    LOGGING_CONFIG['handlers']['file']['maxBytes'] = args.size

    logging.config.dictConfig(LOGGING_CONFIG)

    attr_reg = AttributeRegister()
    attr_list = []
    with open(args.input, 'r') as f:
        for line in f:
            attr_name = line.rstrip()
            ok = attr_reg.append(attr_name)
            if ok:
                attr_list.append(attr_name)
                print('Subscribed to {0} changes events.'.format(attr_name))
            else:
                print('Error on subscription to {0}.'.format(attr_name))
    try:
        while True:
            time.sleep(.1)
    except (KeyboardInterrupt, SystemExit):
        print('Stopped...')

    for attr_name in attr_list:
        attr_reg.pop(attr_name)
        print('Unsubscribed {0}'.format(attr_name))


if __name__ == '__main__':
    main()
